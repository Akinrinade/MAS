package com.srcim2018.semanticmodelimpl.impl;

import com.srcim2018.semanticmodelimpl.*;


import java.net.URI;
import java.util.Collection;
import javax.xml.datatype.XMLGregorianCalendar;

import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.WrappedIndividualImpl;

import org.protege.owl.codegeneration.inference.CodeGenerationInference;

import org.semanticweb.owlapi.model.IRI;
import org.semanticweb.owlapi.model.OWLOntology;


/**
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: DefaultConveyor <br>
 * @version generated on Wed Apr 03 18:34:49 WEST 2019 by root
 */
public class DefaultConveyor extends WrappedIndividualImpl implements Conveyor {

    public DefaultConveyor(CodeGenerationInference inference, IRI iri) {
        super(inference, iri);
    }





    /* ***************************************************
     * Data Property http://www.semanticweb.org/srcim2018/ontologies/srcimOntology#DeviceID
     */
     
    public Collection<? extends String> getDeviceID() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_DEVICEID, String.class);
    }

    public boolean hasDeviceID() {
		return !getDeviceID().isEmpty();
    }

    public void addDeviceID(String newDeviceID) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_DEVICEID, newDeviceID);
    }

    public void removeDeviceID(String oldDeviceID) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_DEVICEID, oldDeviceID);
    }


    /* ***************************************************
     * Data Property http://www.semanticweb.org/srcim2018/ontologies/srcimOntology/Description
     */
     
    public Collection<? extends String> getDescription() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_DESCRIPTION, String.class);
    }

    public boolean hasDescription() {
		return !getDescription().isEmpty();
    }

    public void addDescription(String newDescription) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_DESCRIPTION, newDescription);
    }

    public void removeDescription(String oldDescription) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_DESCRIPTION, oldDescription);
    }


    /* ***************************************************
     * Data Property http://www.semanticweb.org/srcim2018/ontologies/srcimOntology/ID
     */
     
    public Collection<? extends String> getID() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_ID, String.class);
    }

    public boolean hasID() {
		return !getID().isEmpty();
    }

    public void addID(String newID) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_ID, newID);
    }

    public void removeID(String oldID) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_ID, oldID);
    }


    /* ***************************************************
     * Data Property http://www.semanticweb.org/srcim2018/ontologies/srcimOntology/NextConveyor
     */
     
    public Collection<? extends String> getNextConveyor() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_NEXTCONVEYOR, String.class);
    }

    public boolean hasNextConveyor() {
		return !getNextConveyor().isEmpty();
    }

    public void addNextConveyor(String newNextConveyor) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_NEXTCONVEYOR, newNextConveyor);
    }

    public void removeNextConveyor(String oldNextConveyor) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_NEXTCONVEYOR, oldNextConveyor);
    }


}
